// Ab Version 17 muss React nicht mehr in Dateien mit JSX importiert werden
// import React from 'react';

import { Fragment } from 'react';
import PicsumImage from './PicsumImage';
import Quote from './Quote';

const images = [
	{ id: 1003, alt: 'Reh' },
	{ id: 237, alt: 'Hund' },
	{ id: 1001, alt: 'Boot' },
	{ id: 1015, alt: 'Tal' },
];

export default function JsxDemo() {
	// Hier ist JavaScript!

	return (
		<div>
			{/* Kommentar */}
			{/*    	 <FirstComponent />
   		 <Emoji icon="üçÄ" description="Kleeblatt" />
   		 <Emoji icon="üö≤" description="Fahrrad" />
   		 <Siblings />
   		 <Parent>
   			 <Emoji icon="üëß" description="Tochter" />
   			 <Emoji icon="üëß" description="Tochter" />
   			 <h3>Meine Tiere</h3>
   			 <Emoji icon="üêà‚Äç‚¨õ" description="Katze" />
   		 </Parent>
   		 <Quote text="React rockt!" />
   		 <Collection />
   		 <PicsumImage id="15" alt="Landschaft" />
   		 <ImageGrid images={images} />
   		 <Conditionals name="" email="" />
   		 <SemanticHtml headingLevel={3} />*/}
			<HtmlString />
		</div>
	);
}

/* Eine React-Komponente ist eine Funktion, die mit return HTML
(oder andere React-Komponenten) zur√ºckgibt. Man kann sie wie HTML-Elemente
einsetzen, und dabei den Funktionsname als Elementnamen nutzen.
Der Name der Funktion sollte immer mit Gro√übuchstaben beginnen und
W√∂rter mit Gro√übuchstaben Trennen (sog. PascalCase-Schreibweise).
Wichtig ist, dass alle HTML-Elemente und React-Komponenten geschlossen
werden m√ºssen, es gibt (wie in XML) keine selbstschlie√üenden Elemente.
Aus dem HTML-Element <img> wird also entweder <img></img> oder in der
Kurzschreibweise <img /> (mit Slash vor der schlie√üenden eckigen Klammer).
Untenstehende Komponente k√∂nnte so verwendet werden: <FirstComponent />
*/
function FirstComponent() {
	return <strong>Meine erste Komponente!</strong>;
}

/* Damit Komponenten nicht immer den gleichen Inhalt ausgeben,
k√∂nnen sie wie HTML-Elemente eigene Attribute erhalten, die in
React props hei√üen. Die Attribute k√∂nnen frei gew√§hlt werden,
ihr Inhalt wird der Funktion in einem Objekt √ºbergeben.
https://de.reactjs.org/docs/components-and-props.html

Die Attribute der HTML-Elemente funktionieren wie gewohnt,
m√ºssen aber zum Teil anders geschrieben werden, weil sie
mit gesch√ºtzten JavaScript-Begriffen kollidieren. Am wichtigsten
ist, dass statt class className geschrieben werden muss.
Liste der Abweichungen:
https://de.reactjs.org/docs/dom-elements.html#differences-in-attributes
*/
function Emoji(props) {
	// console.log(props);

	return (
		<span className="emoji" aria-label={props.description}>
			{props.icon}
		</span>
	);
}

/* React-Komponenten m√ºssen in return immer EIN alles umfassendes
Element zur√ºckgeben, man kann also nicht z.B. h2 und p neben bzw.
nacheinander zur√ºckgeben. Als Ausweg kann man Fragment (muss aus react
importiert werden) als Klammer um die beiden Elemente verwenden.
Fragment ist nur ein Hilfe f√ºr React und wird nicht in HTML umgewandelt,
d.h. im HTML wird wie gew√ºnscht nur h2 gefolgt von p ausgegeben.
(Als Sonderfall kann man aus einer Komponente auch null zur√ºckgeben, um
gar kein HTML zu erzeugen.)
*/
function Siblings() {
	return (
		<Fragment>
			<h2>Geschwister</h2>
			<p>Untertitle</p>
		</Fragment>
	);
}

/* Die Kurzschreibweise von Fragment (die nicht importiert werden muss)
    ist <> und </>.
    Achtung: Die Kurzschreibweise kann keine props erhalten,
    insbesondere das key-Prop in einer Schleife kann nur mit der Fragment-
    Schreibweise verwendet werden. */
function Siblings2() {
	return (
		<>
			<h2>Geschwister</h2>
			<p>Untertitle</p>
		</>
	);
}

/* M√∂chte man eine React-Komponente wie ein HTML-Element verwenden,
dass zwischen √∂ffnendem und schlie√üendem Element beliebige weitere
Elemente beeinhaltet, erh√§lt man automatisch in props.children die
Kindelemente, die man dann an beliebiger Stelle platzieren kann.
Weitere Details und Anwendungm√∂glichkeiten:
https://de.reactjs.org/docs/jsx-in-depth.html#children-in-jsx
*/
function Parent(props) {
	console.log(props);

	return (
		<div className="parent">
			<h2>Meine Familie</h2>
			{props.children}
		</div>
	);
}

/* M√∂chte man einen Array direkt in JSX darstellen, kann man die map-Methode
nutzen, um jeden Eintrag im Array in ein Element umzuwandeln. Arrays mit
HTML oder React-Komponenten werden automatisch dargestellt.
Damit React Elemente, die dynamisch aus einem Array erzeugt werden, korrekt
und optimiert darstellen und aktualisieren kann, ben√∂tigt jedes Element ein
key-Attribut, das einen innerhalb der Sammlung einmaligen Wert hat. Das
key-Attribut ist nur intern f√ºr React gedacht, es sollte nicht als prop
in einer Komponente genutzt werden.

https://beta.reactjs.org/apis/react/useState#resetting-state-with-a-key-resetting-state-with-a-key
 */
function Collection() {
	const languages = [{ name: 'HTML' }, { name: 'CSS' }, { name: 'JavaScript' }];

	const elementsArray = languages.map(({ name }) => <li key={name}>{name}</li>);

	return <ul>{elementsArray}</ul>;
}

/*
  √úblicherweise wendet man die Array-Funktion (hier map) direkt an der Stelle im JSX-Code ein,
  an der die Inhalte des Arrays dargestellt werden sollen, ohne Umweg √ºber eine Hilfsvariable
  wie componentsArray.
 
  Man sollte den index nur dann als key verwenden, wenn die Inhalte im Array keinen einmaligen
  Wert (id, url, E-Mail etc.) haben, aber nur dann, wenn der Index im Array auch tats√§chlich immer das
  selbe Element identifizieren, wenn also keine Elemente im Array ausgetauscht, gel√∂scht oder
  hinzugef√ºgt werden.
 
  Sieht React den selben Key, geht es davon aus, dass es sich um das identische Element handelt.
  Meist f√ºhrt ein ge√§nderter Key f√ºr das identische Element also zu unerw√ºnschtem Verhalten.
  Man kann sich diesen Umstand aber auch bewusst zunutze machen, um z.B. einen gr√∂√üeren
  Komponentenbaum (etwa ein komplexes Formular) durch einen ver√§nderten Key komplett zur√ºckzusetzen,
  siehe dazu https://beta.reactjs.org/apis/react/useState#resetting-state-with-a-key-resetting-state-with-a-key
 
  */
function Collection2() {
	const languages = [{ name: 'HTML' }, { name: 'CSS' }, { name: 'JavaScript' }];

	return (
		<ul>
			{languages.map(({ name }) => (
				<li key={name}>{name}</li>
			))}
		</ul>
	);
}

/*
1. √úbergebt ImageGrid den prop images, und verwendet daf√ºr beim
Einsetzen der Komponente den Array images
2. Gebt ein section-Element mit der Klasse image-grid zur√ºck.
3. Innerhalb dieses section-Elements soll f√ºr jeden Eintrag in images
eine PicsumImage-Komponente erzeugt werden.
*/

/* M√∂chte man Daten als props √ºbergeben, die in einem Objekt stecken,
und die Schl√ºssel in dem Objekt sind identisch mit den props-Namen,
kann man sich id={id} etc. sparen, und stattdessen das Objekt mit
"Objekt-Spread" in die Komponente legen, so wird automatisch aus
jedem key im Objekt ein gleichnamiges Attribut erstellt.
https://de.reactjs.org/docs/jsx-in-depth.html#spread-attributes
*/
function ImageGrid({ images }) {
	return (
		<section className="image-grid">
			{images.map((image) => (
				<PicsumImage {...image} key={image.id} />
			))}
		</section>
	);
}

/*
Oft m√∂chte man kompakt innerhalb eines JSX-Blocks Bedingungen pr√ºfen
und darauf basierend Elemente darstellen.
1. Der oder-Operator || gibt den ersten Wert zur√ºck, der "truthy"
ist, und bricht die Pr√ºfung anschlie√üend ab. Dieser Ausdruck w√ºrde z.B. "Hallo"
ergeben:
false || 0 || "Hallo" || "Welt"
In JSX kann man dies nutzen, um Alternativwerte darzustellen. Wenn im Beispiel
name nicht falsy ist (also z.B. kein leerer String), wird name ausgegeben, andernfalls
"Anonymous".

2. Der und-Operator && gibt den letzten gepr√ºften Wert zur√ºck, wenn alle Bedingungen bzw.
Werte davor truthy waren. Andernfalls wird der Ausdruck zu false werden.
Dieser Ausdruck w√ºrde "Welt" ergeben:
true && "Hallo" && "Welt"
In JSX kann man damit sehr leicht ein Element ausgeben oder nichts ausgeben, da false
einfach nichts ausgibt.
Der E-Mail-Link wird nur ausgegeben, wenn email nicht falsy
(z.B. ein leerer String) ist. H√§ufig wird auch eine State-Wert gepr√ºft, um ein Element
ein- und auszublenden.
Aber Achtung: React gibt nur bei null, undefined, "" oder false nichts aus. Die Zahl
0 dagegen ist zwar falsy, aber w√ºrde die Augabe 0 erzeugen. M√∂chte man z.B. etwas nur
dann anzeigen, wenn ein Array nicht leer ist, muss man explizit fragen, ob length > 0 ist.

3. Der tern√§re Operator (Kurzform von if-else) kann eingesetzt werden, um das eine oder
das andere Element darzustellen.

Weitere Informationen:
https://de.reactjs.org/docs/conditional-rendering.html
https://de.reactjs.org/docs/jsx-in-depth.html#booleans-null-and-undefined-are-ignored
https://kentcdodds.com/blog/use-ternaries-rather-than-and-and-in-jsx
https://thoughtspile.github.io/2022/01/17/jsx-conditionals/
}
*/
function Conditionals({
	name = 'Anonymous',
	email,
	items = [],
	approved = true,
}) {
	return (
		<div>
			{/* Anonymous wird nur angezeigt, wenn name undefined ist. */}
			<h2>{name}</h2>
			{/* Anonymous wird auch bei falsy Wert in name genutzt, z.B. leerer String. */}
			<h2>{name ? name : 'Anonymous'}</h2>
			{/* Oder: Der erste truthy Wert wird genommen. */}
			<h2>{name || 'Anonymous'}</h2>
			{/* Und: Bricht ab, sobald ein Wert als falsch gilt, d.h. Link wird nicht ausgegeben. */}
			{email && <a href={`mailto:${email}`}>{email}</a>}
			{/* Achtung: Anders als die falsy-Werte null, false, undefined, "" etc. wird 0 ausgegeben. */}
			{items.length && 'Liste'}
			{/* false ergibt keine Ausgabe. */}
			{items.length > 0 && 'Liste'}
			{/* Die eine oder die andere Sache ausgeben. */}
			{approved ? <strong>Genehmigt</strong> : <strong>Nicht genehmigt</strong>}
		</div>
	);
}

function SemanticHtml({ headingLevel = 2 }) {
	/* M√∂glichkeit, die verwendeten HTML-Elemente dynamisch zu machen,
    z.B. f√ºr die korrekte √úberschrift. Wichtig ist, dass die Variable,
    hier Heading, mit Gro√übuchstaben beginnt.  */
	const Heading = `h${headingLevel}`;
	return (
		<section>
			<Heading>√úberschrift</Heading>
			<p>
				Lorem ipsum dolor, sit amet consectetur adipisicing elit. Eos, delectus?
			</p>
		</section>
	);
}

/* Um zu verhindern, dass sch√§dlicher Code - also insbesondere JavaScript -
  in der Ausgabe auftaucht, "escaped" React standardm√§√üig alles HTML, das
  in Strings auftaucht. Andernfalls k√∂nnten z.B. Angreifer in einem Kommentar
  unter einem Blogeintrag JavaScript schreiben, und der Code w√ºrde bei allen
  Usern ausgef√ºhrt, welche den Kommentar betrachten. (XSS, cross-site scripting)
  Wenn man sicher ist, dass der Text mit HTML aus einer vertrauensw√ºrdigen
  Quelle stammt (etwa der eigenen Datenbank), kann man wie unten demonstriert
  einem HTML-Element das Attribut dangerouslySetInnerHTML geben, und als Wert
  ein Objekt das unter dem Schl√ºssel __html (zwei Unterstriche) den eigentlichen
  Text (mit HTML) enth√§lt. (Die erste geschweifte Klammer √∂ffnet den JavaScript-
  Bereich in JSX, die zweite ist dann das Objekt.)
  Wichtig: Auch HTML-Entities wie &mdash; (Bindestrich) werden standardm√§√üig
  nicht in die HTML-Entsprechung umgewandelt.
  https://de.reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml
  https://de.wikipedia.org/wiki/Cross-Site-Scripting
  Wenn man weitere Optionen ben√∂tigt, und der String nicht nur HTML-Elemente,
  sondern auch React-Komponenten enth√§lt, hilft diese Bibliothek:
  https://www.npmjs.com/package/html-react-parser
  */
function HtmlString() {
	const textWithHtml =
		'Text mit <i onmouseover="alert(`Hacked!`)">Formatierung</i>';

	return (
		<>
			<div>{textWithHtml}</div>
			<div dangerouslySetInnerHTML={{ __html: textWithHtml }} />
		</>
	);
}
